/*
add color to class

usage:
    @include colors(border,'border-color');
 */
$colors:primary danger secondary success info warning light dark;

@mixin colors($propertyClass, $property) {
  @each $color in $colors {
    &.nirvana-#{$propertyClass}-#{$color} {
      #{$property}: var(--nirvana-#{$color}) !important;

      @if($propertyClass !=color) {
        @if($color==light) {
          color: var(--nirvana-dark);
        }

        @else {
          color: var(--nirvana-light);
        }
      }
    }
  }
}

@mixin colorsLight($propertyClass, $property) {
  @each $color in $colors {
    &.nirvana-#{$propertyClass}-#{$color} {
      #{$property}: var(--nirvana-#{$color}-light) !important;

      @if($propertyClass !=color) {
        @if($color==light) {
          color: var(--nirvana-dark);
        }

        @else {
          color: var(--nirvana-light);
        }
      }
    }
  }
}

@mixin colorsHover($propertyClass, $property) {
  @each $color in $colors {

    &.nirvana-#{$propertyClass}-#{$color}:hover,
    &.nirvana-#{$propertyClass}-#{$color}:active {
      #{$property}: var(--nirvana-#{$color}-dark) !important;

      @if($propertyClass !=color) {
        @if($color==light) {
          color: var(--nirvana-dark);
        }

        @else {
          color: var(--nirvana-light);
        }
      }
    }
  }
}

/*
dark and light

usage:
    @include darkAndLightColor('red', $nirvana-red);
*/
$lightList:light lighter lightest;
$darkList:dark darker darkest;

@mixin darkAndLightColor($colorName, $property) {
  $var: 0;
  --nirvana-#{$colorName}: #{$property};

  @each $item in $lightList {
    $var: $var + 10;
    --nirvana-#{$colorName}-#{$item}: #{lighten($property,$var)};
  }

  $var:0;

  @each $item in $darkList {
    $var: $var + 10;
    --nirvana-#{$colorName}-#{$item}: #{darken($property,$var)};
  }
}

/*
Add Prefix

usage:
    selector{
    @include prefix(filter, grayscale(50%), moz webkit);
    }
*/
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

/*
Add Color Opacity

usage:
    selector{
    @include colorOpacity(color, opacity);
    }
*/
@function colorOpacity($color, $opacity) {
  @return change-color($color, $alpha:$opacity);
}

/*
add color to class

usage:
    @include OpacityColorList(border,'border-color');
 */
@mixin OpacityColorList($propertyClass, $property) {
  @for $i from 1 through 9 {
    --nirvana-#{$propertyClass}-#{$i}: #{colorOpacity($property,$i/10)};
  }
}
